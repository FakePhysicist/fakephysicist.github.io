[{"categories":[],"content":"测试一下 VS Code Snippets. ","date":"2021-08-17","objectID":"/snippets_test/:0:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"admonition Tip This is a tip Note This is a note Warning This is a warning. ","date":"2021-08-17","objectID":"/snippets_test/:1:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"link youtube ","date":"2021-08-17","objectID":"/snippets_test/:2:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"image this is a captionthis is alt text \" this is a caption this is a captionthis is alt text \" this is a caption ","date":"2021-08-17","objectID":"/snippets_test/:3:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"music ","date":"2021-08-17","objectID":"/snippets_test/:4:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"Bilibili ","date":"2021-08-17","objectID":"/snippets_test/:5:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"Youtube ","date":"2021-08-17","objectID":"/snippets_test/:6:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"TypeIt ","date":"2021-08-17","objectID":"/snippets_test/:7:0","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"simple content ","date":"2021-08-17","objectID":"/snippets_test/:7:1","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"code content ","date":"2021-08-17","objectID":"/snippets_test/:7:2","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":[],"content":"group content ","date":"2021-08-17","objectID":"/snippets_test/:7:3","series":["VS Code"],"tags":["VS Code","Snippets"],"title":"VS Code Snippets 测试","uri":"/snippets_test/"},{"categories":["documentation"],"content":"总结抄袭一些 VS Code 的操作技巧 ","date":"2021-08-17","objectID":"/vscode_usage/:0:0","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"智能感知 ⭐ Ctrl + Space 触发\"建议\"小部件 默认情况下，Tab 或 Enter 表示接受当前选项 ","date":"2021-08-17","objectID":"/vscode_usage/:1:0","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"文件和文件夹 ⭐ ","date":"2021-08-17","objectID":"/vscode_usage/:2:0","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"打开关闭边栏 Ctrl+B ","date":"2021-08-17","objectID":"/vscode_usage/:2:1","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"禅模式 Ctrl + K, Z 进入无干扰的禅模式；按两次 Esc 退出 ","date":"2021-08-17","objectID":"/vscode_usage/:2:2","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"快速打开文件 Ctrl + P 可以搜索 ","date":"2021-08-17","objectID":"/vscode_usage/:2:3","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"编辑技巧 ⭐ 当然这些操作都可以通过 菜单 👉 选择 来进行操作 ","date":"2021-08-17","objectID":"/vscode_usage/:3:0","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"多光标修饰符 多光标修饰符是用来设置我们如果配合鼠标单击来添加多个光标。比如，当我们可以通过 Alt + 单击 添加多个光标时, Alt 键就是多光标修饰符 插入多个光标后, 可以同时移动或者选择 ","date":"2021-08-17","objectID":"/vscode_usage/:3:1","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"通用操作 Ctrl + C, 复制当前文本 Ctrl + V, 粘贴当前文本 Ctrl + Z, 撤销 Ctrl + Shift + Z, 反撤销 Shift + Alt + F, 整理代码 Ctrl + /, 将当前行注释 / 反注释, 当多行文本被选中时, 将多行文本注释 ","date":"2021-08-17","objectID":"/vscode_usage/:3:2","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"光标操作 Ctrl + Alt + ↑, 向上加入一个光标 Ctrl + Alt + ↓, 向下加入一个光标 Ctrl + U, 撤销上次光标操作 ","date":"2021-08-17","objectID":"/vscode_usage/:3:3","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"光标移动 Ctrl + ← 将光标向左移动一个单词 Ctrl + → 将光标向右移动一个单词 ","date":"2021-08-17","objectID":"/vscode_usage/:3:4","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"界面移动 Ctrl + ↑ 向上移动当前界面 Ctrl + ↓ 向下移动当前界面 Alt 键可在编辑器和资源管理器中（5 倍）快速滚动 ","date":"2021-08-17","objectID":"/vscode_usage/:3:5","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"选中操作 Shift + ← 向左选中 / 反选中一个字符 (重要) Shift + → 向右选中 / 反选中一个字符 (重要) Ctrl + Shift + ← 向左选中 / 反选中一个单词 (重要) Ctrl + Shift + → 向右选中 / 反选中一个单词 (重要) Ctrl + D 当前有选中文本时, 将下一个与其相同的文本加入选中 (重要) Ctrl + L 选择当前行 Ctrl + Shift + L: 选中文件中所有相同的字符串 Shift+Alt+鼠标拖动 列(框)选 Shift + Alt + Right 扩大选中区域 Shift + Alt + Left 缩小当前选择 ","date":"2021-08-17","objectID":"/vscode_usage/:3:6","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"文本行操作 Ctrl + C 当前无选中文本时, 复制当前行 Shift + Alt + ↑ 向上复制当前行, 当多行文本被选中时, 向上复制多行 (重要) Shift + Alt + ↓ 向下复制当前行, 当多行文本被选中时, 向下复制多行 (重要) Alt + ↑ 向上移动当前行, 当多行文本被选中时, 将当前多行文本向上移动 (重要) Alt + ↓向下移动当前行, 当多行文本被选中时, 将当前多行文本向下移动 (重要) Ctrl+Enter 在当前行下边插入一行 Ctrl+Shift+Enter 在当前行上方插入一行 ","date":"2021-08-17","objectID":"/vscode_usage/:3:7","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"导航到特定行 键盘快捷键：Ctrl + G ","date":"2021-08-17","objectID":"/vscode_usage/:3:8","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"导航到文件的开头和结尾 键盘快捷键：Ctrl + Home 和 Ctrl + End ","date":"2021-08-17","objectID":"/vscode_usage/:3:9","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"括号匹配 Windows / Linux: ctrl+shift+\\ ","date":"2021-08-17","objectID":"/vscode_usage/:3:10","series":["VS Code"],"tags":["VS Code"],"title":"VS Code 快捷操作","uri":"/vscode_usage/"},{"categories":["documentation"],"content":"在 wsl 环境下安装 Go, Hugo 并且配置主题 DoIt. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:0:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Go ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:1:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"下载 wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:1:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"安装 Extract the archive you downloaded into /usr/local, creating a Go tree in /usr/local/go. sudo rm -rf /usr/local/go \u0026\u0026sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz Add /usr/local/go/bin to the PATH environment variable, or add to ~/.zshrc export PATH=$PATH:/usr/local/go/bin Verify that you’ve installed Go by opening a command prompt and typing the following command go version ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:1:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Hugo ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:2:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"安装/升级 go to github page and download the Hugo Extended installer for Debian (hugo_extended__Linux-64bit.deb) wget https://github.com/gohugoio/hugo/releases/download/v0.87.0/hugo_extended_0.87.0_Linux-64bit.deb install Hugo with sudo dpkg -i hugo_extended_0.87.0_Linux-64bit.deb update Hugo by repeating the first two steps, overwrite installation. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:2:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"常用命令 hugo： 编译项目生成静态网站，默认位置在项目的 public 目录下 hugo server： 启动你的网站服务 hugo new {folder}/{name}.md: 创建新文章，使用 markdown 进行排版，一般默认放在 posts 文件夹下； 基本没了，一般情况下用这三个命令就够了. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:2:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"DoIt 提示 主要参考了这篇文章 本来是要写 LoveIt 这个主题, 但是她实在是太久没有更新了… 所以爱是会消失是吗:) ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:3:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"DoIt 安装 创建你的项目, Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt How to remove a submodule? ```bash # Remove the submodule entry from .git/config git submodule deinit -f path/to/submodule # Remove the submodule directory from the superproject's .git/modules directory rm -rf .git/modules/path/to/submodule # Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule git rm -f path/to/submodule ``` 初始化项目：git submodule update --init --recursive，完成安装 自动更新 submodule：git submodule update --remote --merge; ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:3:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"项目文件树结构 . ├── archetypes # markdown文章的模版 ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，主要发布这个 ├── resources # 通过hugo命令一起生成的资源文件，暂时不知道什么用 ├── static # 静态文件，比如文章中的图片/视频文件、缩略图等 └── themes # 保存可用的hugo主题 通常，我们只会用到以下几个文件夹的东西 config.toml ：保存 hugo 的配置，包括主题的配置等.详细设置见下方 #网站配置 content ：保存网站的各种内容，比如文章. archetypes ： 保存文章的 markdown 模版，通常包括文章的前缀注释，是一些在创建新文章时会被用到. static ：保存文章中用到的静态文件，比如图片、网站缩略图等. public ：通过hugo命令生成的静态 html 文件、css、js 等.在服务器上发布时主要发布这个文件夹. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:3:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"配置网站设置 配置文件位置：./config.toml 提示 具体的配置条目参考 DoIt 官方文档 ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:3:3","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"开始写第一篇文章 文章前缀参数 在每篇 markdown 文章最前面可以用一部分注释来告诉DoIt主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等. 将文章前缀参数保存在 markdown 模版中 模版文件位置：./archetypes/default.md 生成新文章 生成新文章中文版HelloWorld的命令： hugo new posts/HelloWorld/index.cn.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数. 技巧 也可以手动复制旧文章来生成新文章，不通过命令. 也可以在content文件夹下建新的文件夹，方便管理.这种情况下生成的静态 Html 文件路由效果如下： . └── content └── about | └── index.md // \u003c- https://example.com/about/ ├── posts | ├── firstpost.md // \u003c- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.com/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.com/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.com/quote/first/ └── second.md // \u003c- https://example.com/quote/second/ 本地调试 hugo server --disableFastRender ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:3:4","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Github SSH ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:4:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Generating a new SSH key Open Terminal. Paste the text below, substituting in your GitHub email address. ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new ssh key, using the provided email as a label. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:4:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Adding your SSH key to the ssh-agent Start the ssh-agent in the background. eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. ssh-add ~/.ssh/id_ed25519 ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:4:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Test SSH connection ssh -T git@github.com ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:4:3","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"Adding a new SSH key to your GitHub account 网页操作,很容易 ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:4:4","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"创建 Github 仓库 个人建议创建两个仓库： 一个用于托管博客项目源文件，包括配置文件等包含后续可能配置 API KEY 的东西.设置权限为 Private（不公开） 一个用于托管博客编译后生成的静态 Html 文件(即使用 hugo 命令编译生成的 public 文件夹)，并配置该仓库使用 Github Pages，然后 Github 就会自动检测到它其中的静态 Html 文件并搭建网站.设置权限为 Public（公开） Github WorkflowGithub Workflow \" Github Workflow ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:5:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"第一个仓库 设置为private权限等级，没人看得见 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 设置名为Origin的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github Clone用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 直接用vscode链接本地仓库与远端Github仓库 (vscode yyds) 创建.gitignore 在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传 参考 gitignore.io ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:5:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"第二个仓库 创建仓库，注意名称 第二个仓库名字比较重要，必须是 {{你的github用户名}}.github.io. 比如我的 Github 名字为 FakePhysicist, 那么我需要创建的仓库名称为 fakephysicist.github.io. 在仓库设置里设置启用Github Pages 设置 Branch 为 master, 静态文件位置为/(root), 原因是我们在下个步骤中会直接将生成的 public 文件夹中的内容 push 到 master 分支的 / 目录下. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:5:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"从第一个仓库 push 到第二个仓库 ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:6:0","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"纯手工操作 在 My_Website 目录下执行 git submodule update --init --recursive 将子模块更新到最新状态； In your config/_default/config.yaml file, set baseurl = “https://.github.io/”, where is your Github username. Stop Hugo if it’s running and delete the public directory if it exists (by typing rm -r public/). Add your .github.io repository into a submodule in a folder named public, replacing with your Github username: git submodule add -f -b master https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public Add everything to your local git repository and push it up to your remote repository on GitHub: git add . git commit -m \"Initial commit\" git push -u origin master regenerate your website’s HTML code by running Hugo and uploading the public submodule to GitHub: hugo cd public git add . git commit -m \"Build website\" git push origin main cd .. Notice that the default branch of github is main instead of master now. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:6:1","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":["documentation"],"content":"给源代码仓库添加 Github Action 创建 CI 脚本 什么是Github Action? Github Action 是 Github 提供的 CI 系统，可以让用户编写脚本，并在触发指定的操作后（比如新 commit push 到仓库），自动触发脚本.它可以： 编译项目 测试项目 登陆远程服务器 发布服务 等等…… 在源代码项目根目录下新建.github/workflow/main.yml.(通过 Github Action 网页端操作也可以) . ├── .git ├── .github │ └── workflows │ └── main.yml \u003c---在这里创建 ├── .gitignore ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Hugo setup# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@mainenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:target-branch:\"main\"source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的 Github no-reply 邮箱 注意 注意trigger on里的 branch 是否和自己的相同. 添加了 target-branch, 因为现在 Github 默认 branch 为 main. 最后三行内容需要自行替换. 脚本主要做了以下事情： 创建一个 Hugo 环境 使用 hugo 命令编译代码，产生 public 文件夹 将 public 文件 push 到你的Github用户名.github.io仓库.（也就是你之前创建的第二个仓库） 设置 Push 用的密钥 为了让 Github Action 脚本有权限将代码 Push 到我们的 xx.github.io 仓库，我们需要申请一个密钥并告诉它.在 Github 设置中找到 Developer settings/Personal access tokens 新建一个密钥，权限设置把 Repo 打勾. 复制密钥. 回到第一个仓库的设置里，选择Secrets（密钥） 新建密钥，将刚才生成的密钥填进去，名字设为 API_TOKEN_GITHUB (跟 CI 脚本里的名称对应即可) 观察效果 在 Push 新修改到第一个仓库后，在Action界面可以看到新的workflow开始运行了. 在workflow结束后，可以在第二个仓库看到新的Push 在等待 1-2 分钟后，即可在xx.github.io观察到变化. ","date":"2021-08-16","objectID":"/how-build-a-website-with-hugo/:6:2","series":[],"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/how-build-a-website-with-hugo/"},{"categories":[],"content":"Hello World! This is my first note! ","date":"2021-08-16","objectID":"/hello-world/:0:0","series":[],"tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":null,"content":"穷且益坚，不坠青云之志The Road Not Taken \" 穷且益坚，不坠青云之志 时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ ","date":"2021-08-16","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/"},{"categories":null,"content":"My Github chart ","date":"2021-08-16","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/"},{"categories":null,"content":" 你没有连接至互联网, 只有缓存的页面可用. ","date":"0001-01-01","objectID":"/offline/:0:0","series":null,"tags":null,"title":"Offline","uri":"/offline/"}]