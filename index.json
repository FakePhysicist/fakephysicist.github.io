[{"categories":["documentation"],"content":"Liquid Crystals in FDTD simulation ","date":"2021-08-16","objectID":"/fdtd_lc/:0:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"general work flow grid attribute object defines a transform $U$ to diagonalize the permittivity. $U$ is often a simple rotation matrix. in the material database, create a diagonal anisotropic material on the material tab of a structure object, select the defined diagonal anisotropic material link the LC grid attribute to the object( grid attribute property) ","date":"2021-08-16","objectID":"/fdtd_lc/:1:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"LC rotation The Liquid crystal (LC) rotation grid attribute allows you to specify a spatially varying LC director orientation in terms of theta, phi. Liquid crystals are composed of rod-like molecular structures which have rotational symmetry with respect to a long axis. Therefore, liquid crystals have spatially varying uni-axial optical properties. The refractive indices with respect to the long and short molecular axes are called extraordinary $n_e$ and ordinary $n_o$ respectively, see figure above. Rotational symmetry allows the transformation matrix to reduced to a function of two rotational angles (θ, ϕ). KaTex Tip \\begin{aligned} can’t be on its own line. Nor can \\end{aligned}. You need to use four \\s instead of two because they need to be escaped. You must have a trailing space at the end of those four \\s. $$ \\mathbf{U} = U_z U_y = \\begin{bmatrix} \\cos\\phi \u0026 -\\sin\\phi\u0026 0 \\\\ \\sin\\phi \u0026 \\cos\\phi \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \\end{bmatrix} \\begin{bmatrix} \\cos\\theta \u0026 0 \u0026 \\sin\\theta \\\\ 0 \u0026 1 \u0026 0 \\\\ -\\sin\\theta \u0026 0 \u0026 \\cos\\theta \\end{bmatrix} = \\begin{bmatrix} \\cos\\theta \\cos\\phi \u0026 -\\sin\\theta \u0026 \\sin\\theta \\sin\\phi \\\\ \\cos\\theta \\sin\\phi \u0026 \\cos\\phi \u0026 \\sin\\theta \\sin\\phi \\\\ -\\sin\\theta \u0026 0 \u0026 \\cos\\theta \\end{bmatrix} $$ and the permittivity tensor in the reference (or simulation ) coordinate system $(x,y,z)$ is transformed to the principal coordinate system $(X,Y,Z)$ via a rotation about $z$, and the $y$. we have the transform relation: $$\\begin{bmatrix} X\\\\ Y\\\\ Z \\end{bmatrix} = U(\\theta, \\phi) \\begin{bmatrix} x\\\\ y\\\\ z \\end{bmatrix} $$ and the permittivity in two coordinate systems $$\\mathbf{\\tilde \\varepsilon}_D =U^\\ast(\\theta,\\phi)\\tilde\\varepsilon U(\\theta,\\phi)$$ where $$ \\tilde\\varepsilon_{D}= \\begin{bmatrix} \\varepsilon_0 \u00260\u0026 0 \\\\ 0\u0026 \\varepsilon_0 \u0026 0 \\\\ 0 \u0026 0 \u0026 \\varepsilon_0 \\end{bmatrix}=\\begin{bmatrix} n_0^2 \u00260\u0026 0 \\\\ 0\u0026 n_0^2 \u0026 0 \\\\ 0 \u0026 0 \u0026 n_e^2\\end{bmatrix} $$ is the permittivity in the principle coordinate system $(X,Y,Z)$. ","date":"2021-08-16","objectID":"/fdtd_lc/:2:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Uniform distribution It is quite simple. In LC attribute object, set the properties “theta” and ‘phi\". ","date":"2021-08-16","objectID":"/fdtd_lc/:3:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Spatially varying orientation distribution of LCs ","date":"2021-08-16","objectID":"/fdtd_lc/:4:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Importing data using the script environment In this case, we can use the addgridattribute , and optionally the importdataset script command to add the LC attribute and to set the spatially varying LC orientation. For example, if we want to set up LCs which are twisted in z direction as shown below, where the components of the LC director are given by $$ \\begin{align*} u_{x}(x,y,z) \u0026=\\cos(\\pi z) \\\\ u_{y}(x,y,z) \u0026=\\sin(\\pi z) \\\\ u_{z}(x,y,z) \u0026=0 \\end{align*} $$ # %matplotlib widget # %matplotlib widget %matplotlib inline %config InlineBackend.figure_format = 'svg' # %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt from mpl_toolkits.mplot3d.proj3d import proj_transform from mpl_toolkits.mplot3d.axes3d import Axes3D import numpy as np from matplotlib.patches import FancyArrowPatch class Arrow3D(FancyArrowPatch): def __init__(self, x, y, z, dx, dy, dz, *args, **kwargs): super().__init__((0, 0), (0, 0), *args, **kwargs) self._xyz = (x, y, z) self._dxdydz = (dx, dy, dz) def draw(self, renderer): x1, y1, z1 = self._xyz dx, dy, dz = self._dxdydz x2, y2, z2 = (x1 + dx, y1 + dy, z1 + dz) xs, ys, zs = proj_transform((x1, x2), (y1, y2), (z1, z2), self.axes.M) self.set_positions((xs[0], ys[0]), (xs[1], ys[1])) super().draw(renderer) def _arrow3D(ax, x, y, z, dx, dy, dz, *args, **kwargs): '''Add an 3d arrow to an `Axes3D` instance.''' arrow = Arrow3D(x, y, z, dx, dy, dz, *args, **kwargs) ax.add_artist(arrow) setattr(Axes3D, 'arrow3D', _arrow3D) def LC_twist_z_axis(): with plt.style.context(['science', 'notebook']): fig = plt.figure(dpi = 100) ax = plt.axes(projection='3d') # Make the grid x, y, z = np.meshgrid(0, 0, np.arange(0, 4, 0.03)) # Make the direction data for the arrows ux = np.cos(np.pi * z) uy = np.sin(np.pi * z) uz = np.zeros(z.shape) ax.quiver(x, y, z, ux, uy, uz, length = 0.05, arrow_length_ratio = 0, pivot = 'middle', normalize = True, colors = 'red', alpha = 0.3, linestyles = 'solid') ax.arrow3D(0,0,-0.25,0,-0.05,0, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0.05,0,0, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0,0,7, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.grid(False) ax.axis(False) ax.view_init(elev=45, azim=-45) plt.show() LC_twist_z_axis() we define the director distribution in a matrix variable and put the matrix into the LC attribute property. In the following script, matrix “n” is used to define the director distribution of the twisted nematic LCs, and this information is put into a dataset called LC which contains the x, y, z position data and the director orientations in an attribute called “u”. At the second last line where addgridattribute command is used, a LC attribute is added to the simulation and the director distribution is set up. Note : Magnitude of spatially varying orientation unit vector When specifying the LC orientation, it is important that the magnitude of the orientation vector be exactly 1, except in regions where you don’t want the LC orientation to be set where the magnitude of the vector should be set to 0. # define x/y/z x = 0; y = 0; z = linspace(0e-6,5e-6,100); X = meshgrid3dx(x,y,z); Y = meshgrid3dy(x,y,z); Z = meshgrid3dz(x,y,z); n = matrix(length(x),length(y),length(z),3); # define the orientation function n(1:length(x),1:length(y),1:length(z),1) = cos(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),2) = sin(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),3) = 0; # create dataset containing orientation vectors and position parameters LC=rectilineardataset(\"LC\",x,y,z); LC.addattribute(\"u\",n); # add LC import grid attribute addgridattribute(\"lc orientation\",LC); setnamed(\"LC attribute\",\"nz\",50); # set resolution Note : When setting angle theta via ‘set’ script command, the input must be in radians. For example: setnamed(\"LC attribute\",\"thet","date":"2021-08-16","objectID":"/fdtd_lc/:4:1","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Importing data from .mat file using the graphical user interface In the edit window of the grid attribute, it is possible to import a .mat file containing a dataset with the required director distribution data by clicking on the “Import data…” button. The following code shows an example of how to save a .mat file to be imported by using the matlabsave script command. # define x/y/z x = 0; y = 0; z = linspace(0e-6,5e-6,100); X = meshgrid3dx(x,y,z); Y = meshgrid3dy(x,y,z); Z = meshgrid3dz(x,y,z); n = matrix(length(x),length(y),length(z),3); # define the orientation function n(1:length(x),1:length(y),1:length(z),1) = cos(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),2) = sin(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),3) = 0; # create dataset containing orientation vectors and position parameters LC=rectilineardataset(\"LC\",x,y,z); LC.addattribute(\"u\",n); # save data to .mat file matlabsave(\"LC_import.mat\",LC); We then add a material with diagonal anisotropy components and set up the object to use the LC attribute similarly to the case of uniform distribution. ","date":"2021-08-16","objectID":"/fdtd_lc/:4:2","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Importing data from a CSV (comma-separated values) file From the Import menu in the top toolbar, click on Import from CSV to open the import wizard which allows you to select the CSV file to import. This file is typically created with TechWiz LCD from Sanayi System Co., Ltd (http://sanayisystem.com/). For more details on the file format and steps for importing the data from the graphical wizard, see Import object - Liquid crystal from CSV. The same data can also be imported using the importcsvlc script command. ","date":"2021-08-16","objectID":"/fdtd_lc/:4:3","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Tips on grid attributes ","date":"2021-08-16","objectID":"/fdtd_lc/:5:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Rotating structures When you rotate a geometric primitive, the permittivity tensor is not rotated. In order to do this, you must define a rotation grid attribute that has the same rotation as the object and associate the object with that grid attribute. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:1","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Liquid crystal grid attribute transformation can be disabled by setting the orientation unit vector to 0 As shown in the script in the LC rotation page, it is possible to specify a spatially varying liquid crystal orientation with the Liquid crystal grid attribute using a spatially varying matrix of orientation unit vectors. The magnitude of the orientation vector should be exactly 1 at each position, or the simulation can become unstable. Alternatively, the magnitude of the orientation vector can be set to 0. In such cases, the grid attribute transformation is disabled at that location, and the simulation will use the unrotated diagonal permittivity values. For example, if we set |u(x,y,z)|=1 inside the spherical region and set |u(x,y,z)|=0 outside the region as shown below, a spherical LC region can be set up. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:2","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Index monitor currently record only diagonal index Index monitors to not record any information about the permittivity transformations. Therefore, it is important to do some careful testing to ensure the setup is correct. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:3","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"The diagonal permittivity tensor can be dispersive The diagonal permittivity tensor can be dispersive, but the transformation U is not dispersive. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:4","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Interpolating spatially varying grid attributes Linear interpolation is used to interpolate grid attribute data at each mesh point. Singleton dimensions are extruded uniformly as shown below. If the dimensions of a structure object are larger than the grid attribute data, the attribute will not be applied to the portion of the structure that is outside of the attribute data. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:5","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Simulation speed It is worth noting that using Grid attributes will increase the simulation memory and time requirements. Therefore, when they are not needed, it’s best to ensure they are not used. For example, rather than setting the rotation angle to zero (the grid attribute will still be included in the simulation), it’s best to disable the grid attribute entirely. ","date":"2021-08-16","objectID":"/fdtd_lc/:5:6","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Package Version import sys from typing import List from importlib.metadata import metadata import IPython.display as IPd def notebook_manifest(*packages: List[str] ) -\u003e str: manifest = [ '| Component | Version | Description |', '| --------------------------------- | -------------------------- | -------------------- |', f'| [Python](https://www.python.org/) | {sys.version.split()[0]}| Programming Language |' ] sorted_packages = [*packages]; # convert arguments to a list sorted_packages.sort() for p in sorted_packages: # build the markdown table of module metadata try: meta = {k: v for k, v in metadata(p).items()} manifest.append( f'| [{meta[\"Name\"]}]({meta[\"Home-page\"]}) | {meta[\"Version\"]}| {meta[\"Summary\"]}|') except: manifest.append( f'| {p}| ? | **Unrecognized module!** |') return IPd.Markdown('\\n'.join(manifest)) display(IPd.Markdown('**Packages used in This Notebook**')) notebook_manifest('jupyterlab', 'numpy', 'matplotlib', 'scipy') ","date":"2021-08-16","objectID":"/fdtd_lc/:6:0","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"Packages used in This Notebook** Component Version Description Python 3.9.6 Programming Language jupyterlab 3.0.14 The JupyterLab server extension. matplotlib 3.4.2 Python plotting package numpy 1.20.3 NumPy is the fundamental package for array computing with Python. scipy 1.6.2 SciPy: Scientific Library for Python ","date":"2021-08-16","objectID":"/fdtd_lc/:6:1","series":null,"tags":["FDTD","LC"],"title":"Liquid Crystals in FDTD","uri":"/fdtd_lc/"},{"categories":["documentation"],"content":"FDTD basics, Python scripts controlling Lumerical. ","date":"2021-08-16","objectID":"/fdtd/:0:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Solver Physics In three dimensions, Maxwell equations have six electromagnetic field components: Ex, Ey, Ez and Hx, Hy, and Hz. If we assume that the structure is infinite in the z dimension and that the fields are independent of z, then Maxwell’s equations split into two independent sets of equations composed of three vector quantities each which can be solved in the x-y plane only. These are termed the TE (transverse electric), and TM (transverse magnetic) equations. We can solve both sets of equations with the following components: TE: Ex, Ey, Hz TM: Hx, Hy, Ez ","date":"2021-08-16","objectID":"/fdtd/:1:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Impulse response FDTD solves for the electric field and magnetic field as a function of time. the solver calculates $\\vec{E}\\left(t\\right)$ and $\\vec{H}\\left(t\\right)$ but, in general, what we want is field as a function of frequency or wavelength $\\vec{E}\\left(\\omega\\right)$ poynting vector, transmission, reflection time domain-\u003efreqency domain? Fourier Transform! In linear systems, the impulse response of the system: $$\\vec{E}\\left(\\omega\\right)=\\frac{1}{s\\left(\\omega\\right)}\\int_{0}^{t_{sim}}e^{i\\omega t}\\vec{E}\\left(t\\right)dt$$ where $$s\\left(\\omega\\right)=\\int_{0}^{t_{source}}e^{i\\omega t}\\vec{s}\\left(t\\right)dt$$ is the fourier transform of the source pulse. It should be independent of the source pulse used in linear optics system (no nonlinearity is considered here). Ideally, $s\\left(\\omega\\right)=1$ and $s\\left(t\\right)$ is a Dirac delta function $t_{sim}$ should be long enough. with impulse response $\\vec{E}\\left(\\omega\\right)$, $\\vec{H}\\left(\\omega\\right)$ and $\\varepsilon\\left(\\omega\\right)$, one can calculate reflection, transmission, scattering cross sections, absorptions and much more Poynting Vector $$\\left\u003c\\vec{P}\\left(\\omega\\right)\\right\u003e_{t}=\\frac{1}{2}\\Re\\left[\\vec{E}\\left(\\omega\\right)\\times\\vec{H}^{*}\\left(\\omega\\right)\\right]$$ which is not a simple fourier transform of $\\vec{P}\\left(t\\right)$. Power $$Power\\left(\\omega\\right)=\\int_{S}\\left\u003c\\vec{P}\\left(\\omega\\right)\\right\u003e_{t}\\cdot d\\vec{S}$$ But we have the Parseval-Plancherel theorem $$\\int_{-\\infty}^{\\infty}\\vec{E}\\left(t\\right)\\times\\vec{H}^{*}\\left(t\\right) dt=\\frac{1}{2\\pi}\\int_{-\\infty}^{\\infty}\\vec{E}\\left(\\omega\\right)\\times\\vec{H}^{*}\\left(\\omega\\right) d\\omega$$ Transmission $$T\\left(\\omega\\right)=\\frac{\\int_{S}\\vec{P}\\left(\\omega\\right)\\cdot d\\vec{S}}{s\\left(\\omega\\right)}$$ ","date":"2021-08-16","objectID":"/fdtd/:1:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"MODE Given a cross section of a waveguide, the finite-difference eigenmode (FDE) solver calculates the spatial profile and frequency dependence of modes. It can provides us: mode field profile effective index loss TE and TM ratio combined with frequency sweep, one can calculate group delay, dispresion and etc applicable to bent waveguide The solver assumes the waveguide structure in the z direction is uniform, and the field can be expressed as: $$\\vec{E}\\left( x, y\\right)e^{i\\left(\\beta z-\\omega t\\right)}$$ $$\\vec{H}\\left( x, y\\right)e^{i\\left(\\beta z-\\omega t\\right)}$$ where $\\omega$ is the angular frequency and $\\beta$ is the propagation constant. Once the structure is meshed, the whole problem is converted to a matrix eigenvalue problem and solved by sparse matrix technique. It can be seen the physics convention $e^{i\\left(\\beta z-\\omega t\\right)}$ is adopted here. If $\\beta\u003e0$, the wave is propagating in the positive z direction. ","date":"2021-08-16","objectID":"/fdtd/:1:2","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"effective index the modal effective index is defined as $$n_{eff}=\\frac{c\\beta}{\\omega}$$ similar to the bulk index definition, except that geometric contributions are taken into account. Since the mode must be guided the effective index is bounded by the indices such that $$n_{\\text{max(sub,clad)}} \u003c n_{eff} \u003c n_{core}$$ ","date":"2021-08-16","objectID":"/fdtd/:1:3","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"loss (dB/m) An electric field propagating in the positive z-direction in a medium with a complex refractive index of $n+i\\kappa$ can be expressed as follows: $$E(z) = e^{i2\\pi(n+i\\kappa)z/\\lambda_0}$$ here, $k = 2\\pi(n+i\\kappa)/\\lambda_0$. The propagation loss in dB/m for a mode propagating in the z-direction is defined as $$loss = -10 \\log_{10}(\\frac{P(z)|_{z = \\ 1\\ m}}{P(z)|_{z = \\ 0\\ m}}) = -10 \\log_{10}(\\frac{|E(1)|^2}{|E(0)|^2})=-20 \\log_{10}(\\frac{|E(1)|}{|E(0)|})$$ Combining the formulas gives $$loss = -20 \\log_{10}(e^{-2\\pi\\kappa/\\lambda_0})$$ ","date":"2021-08-16","objectID":"/fdtd/:1:4","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"TE polarization fraction Two definitions for polarization fractions are provided by MODE. The TE Polarization Fraction definition is typically used in integrated optics, but for fibers, this also helps to determine the polarization of the mode. The “TE polarization fraction Ex” for propagation along the z-direction is defined by the following equation: $$\\text{TE polarization fraction (Ex)} = \\frac{\\int |Ex|^2 dxdy}{\\int (|Ex|^2+|Ey|^2)dxdy}$$ where $|Ex|^2+|Ey|^2$ corresponds to $|E_{||}|^2$ (since we are considering the polarization of the modes, here we only consider the fields parallel to the mode cross section). In this case, if TE polarization fraction (Ex) = 100%, this mode is considered pure TE-polarized. In contrast, 0% refers to a pure TM-polarized mode. Note that some modes may not be perfectly polarized in one direction and in those cases you may find quasi-polarized modes in the Mode List. For propagation along the x direction, ie., “TE polarization fraction Ey”: $$\\text{TE polarization fraction (Ey)} = \\frac{\\int |Ey|^2 dydz}{\\int (|Ey|^2+|Ez|^2) dydz}$$ For propagation along the y direction, ie., “TE polarization fraction Ex”: $$\\text{TE polarization fraction (Ex)} =\\frac{\\int |Ex|^2 dxdz}{\\int (|Ex|^2+|Ez|^2) dxdz}$$ Note that this definition is arbitrary (since we allow for propagation in any direction), the user may have to look carefully at the field components if unusual orientations of the Eigenmode Solver are used. ","date":"2021-08-16","objectID":"/fdtd/:1:5","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Waveguide TE/TM Fraction There are alternative definitions that are used more frequently for other applications. The waveguide TE/TM fraction indicates the amount of E/H field in the direction of propagation. It is equal to the integrated transverse field intensity divided by the integrated total field intensity. A mode with a waveguide TE/TM fraction of 100%/100% is a TEM mode The “waveguide TE/TM fraction” is defined by the following equations:. $$\\text{waveguide TE fraction } = 1-\\frac{\\int\\left|E_{\\perp}\\right|^{2} dA_{||}}{\\int\\left(|E|^{2}\\right) dA_{||}}$$ $$\\text{waveguide TM fraction } = 1-\\frac{\\int\\left|H_{\\perp}\\right|^{2} dA_{||}}{\\int\\left(|H|^{2}\\right) dA_{||}}$$ where $E_{\\perp}$ and H_{\\perp} refer to the field components perpendicular to the mode cross section (ie. in the direction of propagation), $A_{||}$ refers to the integration area on the mode cross section plane. ","date":"2021-08-16","objectID":"/fdtd/:1:6","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Effective Area Effective area is a quantitative measure of the modal area. As with TE fraction, there are a number of possible similar definitions which can be easily misinterpreted. We have adopted the definition developed by G. P. Agrawal, Nonlinear Fiber Optics, 4th ed. (Academic, 2007). This method has the benefit of not making any assumptions about the shape of the field distribution beforehand. $$\\text{Effective Area} = \\frac{(\\int_{}^{}|E|^{2}dA)^{2} }{\\int_{}^{}|E|^{4}dA}$$ The effective area defined here is similar to the Landau, and Lishitz method, based on the ratio of a mode’s total energy density per unit length and its peak energy density. For Gaussian beams, and fiber optic modes the most cited quantity is the beam waist w(z) or equivalently mode field diameter (MFD). The MFD corresponds to twice the radial distance, where $I(r) = 1-e^{-2}\\approx 13.5$. In with the comparison normal distribution this radial value would correspond to $f( x \\approx 3 \\sigma )$, and is related to the full width half maximum (FWHM) as $w(z) \\approx 1.18 \\text{ FWHM}$. The effective area method cited above is typically in the range of 95-104% of what would be found using through the circle described by the MFD. ","date":"2021-08-16","objectID":"/fdtd/:1:7","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Boundary condition ","date":"2021-08-16","objectID":"/fdtd/:2:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"PML The steep angle profile should be used when the fields are incident on the PML at a steep or grazing angle, typically beyond 60 degrees. ","date":"2021-08-16","objectID":"/fdtd/:2:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Periodic With periodic boundaries, the periodicity is determined by the span of the simulation region. It is very important to understand that both the structure, electromagnetic fields and source must be periodic. For this reason, plane wave sources with normal incidence are most often used with periodic boundary conditions. ","date":"2021-08-16","objectID":"/fdtd/:2:2","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Bloch Bloch boundaries are used for periodic simulations where the source is injected at an angle – they are similar to periodic boundaries where light which exits one boundary is re-injected from the opposite boundary, but they add the required phase difference to the light that is re-injected corresponding to the phase accumulated between the unit cells due to the angle of the source. ","date":"2021-08-16","objectID":"/fdtd/:2:3","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Symmetry/anti-symmetry When you have a structure and source that have a plane of symmetry through the middle of the simulation region, symmetry boundaries allow you to reduce the size of the solver region that needs to be simulated. The main challenge with using symmetry boundaries is determining which type of symmetry exists in the system: Positive Symmetry, or Anti-Symmetry. In most cases, the type of symmetry can be determined from the source polarization. If the source polarization arrow is tangential to the plane of symmetry, then the polarization arrow and the boundary shading color should match. If the polarization arrow is normal to the boundary, then the colors should not match.In most cases, monitors automatically unfold field data according to these rules. When using symmetry boundaries, the boundary should only be applied to the ‘min’ boundary. The ‘max’ boundary should be set to whatever the boundary would be without symmetry; typically PML. The only exception is when using symmetry boundaries with periodic structures. In such cases, set both the min and max boundaries in the periodic direction to use symmetric or anti-symmetric boundaries. You will need to enable the “allow symmetry on all boundaries” option. ","date":"2021-08-16","objectID":"/fdtd/:2:4","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Source ","date":"2021-08-16","objectID":"/fdtd/:3:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"plane wave normal incidence/ angled incidence single frequency/ broadband Bloch/Periodic BFAST diffracting ","date":"2021-08-16","objectID":"/fdtd/:3:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"mode source The mode source can be used to inject the mode of a waveguide or fiber. The mode source includes an integrated mode solver with uses the finite-difference eigenmode solving algorithm to calculate the field profile of the supported modes of a given structure cross section. The mode solver assumes that the cross section of the structure constant along the propagation direction. To set up the mode source, the source should be positioned over the cross section of the waveguide or fiber. The mode source settings allow you to specify whether you want to find the mode for a straight or bent waveguide with a given bending radius, and also specify rotation angles to match the angle of the waveguide if the waveguide is not aligned with the x, y, or z-axis. You can choose to inject the fundamental mode which is the mode with highest effective index, or fundamental TE or fundamental TM mode which correspond to the mode with the highest effective index which has the desired TE-like or TM-like polarization. In FDTD Solutions, TE-like modes correspond to modes where the electric field polarization is primarily along the y-direction for sources injected along the x-axis, and primarily along the x-direction for sources injected in the y or z-axis directions. After calculating the modes using the specified mode solver settings, modes will appear in the model list at the top of the window, and you can select a mode from the mode list to plot the field profile of the mode. You can also see details about the calculated mode in the mode list table such as the effective index of the mode, loss, and polarization fraction. The formulae for the polarization fraction calculation and waveguide TE/TM fraction are calculated as: TE polarization fraction (for x-axis injection): $$\\frac{\\int\\left|E_{y}\\right|^2 dydz}{\\int\\left(\\left|E_{y}\\right|^2+\\left|E_{z}\\right|^2\\right) dydz}$$ waveguide TE and TM fraction (for z-axis injection): $$1-\\frac{\\int\\left|E_{\\perp}\\right|^2 dxdy}{\\int\\left(\\left|E\\right|^2\\right) dxdy}$$ $$1-\\frac{\\int\\left|H_{\\perp}\\right|^2 dxdy}{\\int\\left(\\left|H\\right|^2\\right) dxdy}$$ Multifrequency mode calculation option. This option should be used whenever injecting a broadband mode source. This will calculate the supported mode profile over the broadband range rather than just at the center frequency of the range. Ensure that the source span is wide enough to completely contain the mode of the structure. You can visually check this by plotting the field profile and making sure that the field amplitude of the mode decays to 0 around the edges of the source, but another way you can test this is by doing convergence testing by changing the span of the source. Start by calculating the mode, then increasing the span of the mode source and re-calculating the mode, then compare the calculated effective index of the mode between the two different source spans. If the mode source region is wide enough to contain the full mode, the calculated effective index should stay the same when you further increase the source span. ","date":"2021-08-16","objectID":"/fdtd/:3:2","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"dipole source The dipole source is a point source which emits a dipole radiation pattern. There are 2 types of dipole sources available: electric and magnetic. The electric dipole is equivalent to an oscillating point charge, whereas the magnetic dipole is equivalent to a current loop. ","date":"2021-08-16","objectID":"/fdtd/:3:3","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"import source The import source allows you to specify a custom field profile to inject. The data for the field profile of the source can come from monitor data measured in a previous simulation, or it could be from another software such as a third-party ray tracing tool. It can also be calculated based on a formula using the script. You might want to use monitor data from a previous simulation as a source in a subsequent simulation, and this can be done in order to break up a large simulation into two or more simulations. ","date":"2021-08-16","objectID":"/fdtd/:3:4","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Monitor ","date":"2021-08-16","objectID":"/fdtd/:4:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"frequency domain field monitor Frequency domain field monitors return data in the frequency domain by taking the Fourier transform of the time domain fields. By default, CW normalization is applied, which means that the data is also normalized by the spectrum of the source pulse to give the result as though the source spectrum is uniform. In other words, by default, the result from a frequency domain monitor at a given frequency point is the response as though the source is injecting a continuous wave at the specified frequency with amplitude 1. There are two available frequency domain field monitors: the frequency-domain field profile monitor and the frequency-domain field and power monitor. The only difference between the two monitor types is the spatial interpolation method used. The profile monitor uses the specified position interpolation and the power monitor uses the nearest mesh cell interpolation method. In most cases, the results from these two monitors will be very similar. We recommend using the Frequency Domain Field and Power monitor unless you are an advanced user and have a detailed understanding of the monitor interpolation options. If all E and H field components are recorded by the monitor, it’s possible to project the fields from the monitor to get the far field angular distribution. This result is something that is calculated as a post-processing step after the simulation has been run, so when you first try to visualize the farfield result of the monitor, if it hasn’t yet been calculated, a window will pop up asking you to select the settings you want to use for the far field projection calculation. ","date":"2021-08-16","objectID":"/fdtd/:4:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Analysis group Analysis groups can contain structures, sources, and monitors, and they are also capable of setting up the properties of these objects using a setup script. The analysis script is used to collect the results from monitors contained inside the group and calculate new results. ","date":"2021-08-16","objectID":"/fdtd/:5:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Lumerical scripting language ","date":"2021-08-16","objectID":"/fdtd/:6:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"General workflow Set up simulation add simulation objects set properties Run simulation Analyze results ","date":"2021-08-16","objectID":"/fdtd/:6:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Common commands comment: ## end the statement with ; put the result on screen ? -?set; ## return a list of properties of the selected objects layoutmode() 0 No, in analysis mode 1 Yes add+‘object name’ -addrect() -addplane() -addpower() select() set(‘property_name’, value) setnamed(‘object_name’, ‘property_name’, value) ## same as select + set getdata(‘object_name’, ‘data_name’) getresult(‘object_name’, ‘dataset_name’) getelectric() ## advanced command, return $\\left|E_{x}\\right|^2+\\left|E_{y}\\right|^2+\\left|E_{z}\\right|^2$ from the monitor transmission() ## return the fraction of power transmitted through the monitor with respect to the source power getsweepdata() getsweepresult() ","date":"2021-08-16","objectID":"/fdtd/:6:2","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"Python API ","date":"2021-08-16","objectID":"/fdtd/:7:0","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"import modules import numpy as np from numpy.lib.scimath import sqrt ## complex sqrt() from scipy import constants import matplotlib.cm as cm import matplotlib.pyplot as plt %matplotlib inline from scipy import interpolate from collections import OrderedDict import importlib ## import mplcursors ## for data cursor ## import sys ## The default paths for windows spec = importlib.util.spec_from_file_location( 'lumapi', 'D:\\\\Program Files\\\\Lumerical\\\\v202\\\\api\\\\python\\\\lumapi.py') ## Functions that perform the actual loading lumapi = importlib.util.module_from_spec(spec) ## spec.loader.exec_module(lumapi) ","date":"2021-08-16","objectID":"/fdtd/:7:1","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"start a session fdtd = lumapi.FDTD() ## an empty instance fdtd = lumapi.FDTD('instance_name.fsp') ## an existing instance ","date":"2021-08-16","objectID":"/fdtd/:7:2","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"get help ?fdtd.addrect help(fdtd.addrect) ","date":"2021-08-16","objectID":"/fdtd/:7:3","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"simulation objects add and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same time set with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd/:7:4","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"run, save and close fdtd.run() fdtd.save('filename.fsp') fdtd.close() ","date":"2021-08-16","objectID":"/fdtd/:7:5","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"deal with data get data Ex = fdtd.getdata(\"profile\",\"Ex\") print('Frequency field profile data Ex is type', type(Ex),' with shape', str(Ex.shape )) Frequency field profile data Ex is type \u003cclass ‘numpy.ndarray’\u003e with shape (101, 61, 1, 5) T, time = fdtd.getresult(\"power\", \"T\"), fdtd.getresult(\"time\",\"E\") print('Transmission result T is type', type(T),' with keys', str(T.keys()) ) print('Time monitor result E is type', type(time),' with keys', str(time.keys()) ) Transmission result T is type \u003cclass ‘dict’\u003e with keys dict_keys([‘lambda’, ‘f’, ‘T’, ‘Lumerical_dataset’]) Time monitor result E is type \u003cclass ‘dict’\u003e with keys dict_keys([’t', ‘x’, ‘y’, ‘z’, ‘E’, ‘Lumerical_dataset’]) data is numerical data type, usually numpy array. dataset is dict type, and should be taken care by T=T_dataset['T'] now T is numpy array type data structure ## get dataset E = fdtd.getresult(\"DFT\",\"E\") ## electric field E = E['E'] we see here E is a 5-dimension matrix Ex = E[:,:,0,:,0] ## spatial(x,y,z) ,wavelength, Ex Ey = E[:,:,0,:,1] ## spatial(x,y,z) ,wavelength, Ey Ez = E[:,:,0,:,2] ## spatial(x,y,z) ,wavelength, Ez ","date":"2021-08-16","objectID":"/fdtd/:7:6","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"pass data between python and lumerical fdtd.putv('var_name',py_var) ## python to lumerical py_var = fdtd.getv( 'var_name') ## lumerical to python ","date":"2021-08-16","objectID":"/fdtd/:7:7","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"run lumerical script language fdtd.eval('x = [0;1;2];y = [0;sqrt(3);0];z = [0;0;0];C = [1,3,2];ds = unstructureddataset(x,y,z,C);') ","date":"2021-08-16","objectID":"/fdtd/:7:8","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\u003e\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd/:7:9","series":null,"tags":["FDTD","Python"],"title":"FDTD Usage","uri":"/fdtd/"},{"categories":["documentation"],"content":"在 wsl 环境下安装 Go, Hugo 并且配置主题 DoIt. ","date":"2021-08-16","objectID":"/hugo-setup/:0:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Go ","date":"2021-08-16","objectID":"/hugo-setup/:1:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"下载 wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz ","date":"2021-08-16","objectID":"/hugo-setup/:1:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"安装 Extract the archive you downloaded into /usr/local, creating a Go tree in /usr/local/go. sudo rm -rf /usr/local/go \u0026\u0026sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz Add /usr/local/go/bin to the PATH environment variable, or add to ~/.zshrc export PATH=$PATH:/usr/local/go/bin Verify that you’ve installed Go by opening a command prompt and typing the following command go version ","date":"2021-08-16","objectID":"/hugo-setup/:1:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Hugo ","date":"2021-08-16","objectID":"/hugo-setup/:2:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"安装/升级 go to github page and download the Hugo Extended installer for Debian (hugo_extended__Linux-64bit.deb) wget https://github.com/gohugoio/hugo/releases/download/v0.87.0/hugo_extended_0.87.0_Linux-64bit.deb install Hugo with sudo dpkg -i hugo_extended_0.87.0_Linux-64bit.deb update Hugo by repeating the first two steps, overwrite installation. ","date":"2021-08-16","objectID":"/hugo-setup/:2:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"常用命令 hugo： 编译项目生成静态网站，默认位置在项目的 public 目录下 hugo server： 启动你的网站服务 hugo new {folder}/{name}.md: 创建新文章，使用 markdown 进行排版，一般默认放在 posts 文件夹下； 基本没了，一般情况下用这三个命令就够了. ","date":"2021-08-16","objectID":"/hugo-setup/:2:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"DoIt 提示 主要参考了这篇文章 本来是要写 LoveIt 这个主题, 但是她实在是太久没有更新了… 所以爱是会消失是吗:) ","date":"2021-08-16","objectID":"/hugo-setup/:3:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"DoIt 安装 创建你的项目, Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt How to remove a submodule? ```bash # Remove the submodule entry from .git/config git submodule deinit -f path/to/submodule # Remove the submodule directory from the superproject's .git/modules directory rm -rf .git/modules/path/to/submodule # Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule git rm -f path/to/submodule ``` 初始化项目：git submodule update --init --recursive，完成安装 自动更新 submodule：git submodule update --remote --merge; ","date":"2021-08-16","objectID":"/hugo-setup/:3:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"项目文件树结构 . ├── archetypes # markdown文章的模版 ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，主要发布这个 ├── resources # 通过hugo命令一起生成的资源文件，暂时不知道什么用 ├── static # 静态文件，比如文章中的图片/视频文件、缩略图等 └── themes # 保存可用的hugo主题 通常，我们只会用到以下几个文件夹的东西 config.toml ：保存 hugo 的配置，包括主题的配置等.详细设置见下方 #网站配置 content ：保存网站的各种内容，比如文章. archetypes ： 保存文章的 markdown 模版，通常包括文章的前缀注释，是一些在创建新文章时会被用到. static ：保存文章中用到的静态文件，比如图片、网站缩略图等. public ：通过hugo命令生成的静态 html 文件、css、js 等.在服务器上发布时主要发布这个文件夹. ","date":"2021-08-16","objectID":"/hugo-setup/:3:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"配置网站设置 配置文件位置：./config.toml 提示 具体的配置条目参考 DoIt 官方文档 ","date":"2021-08-16","objectID":"/hugo-setup/:3:3","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"开始写第一篇文章 文章前缀参数 在每篇 markdown 文章最前面可以用一部分注释来告诉DoIt主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等. 将文章前缀参数保存在 markdown 模版中 模版文件位置：./archetypes/default.md 生成新文章 生成新文章中文版HelloWorld的命令： hugo new posts/HelloWorld/index.cn.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数. 技巧 也可以手动复制旧文章来生成新文章，不通过命令. 也可以在content文件夹下建新的文件夹，方便管理.这种情况下生成的静态 Html 文件路由效果如下： . └── content └── about | └── index.md // \u003c- https://example.com/about/ ├── posts | ├── firstpost.md // \u003c- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.com/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.com/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.com/quote/first/ └── second.md // \u003c- https://example.com/quote/second/ 本地调试 hugo server --disableFastRender ","date":"2021-08-16","objectID":"/hugo-setup/:3:4","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Github SSH ","date":"2021-08-16","objectID":"/hugo-setup/:4:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Generating a new SSH key Open Terminal. Paste the text below, substituting in your GitHub email address. ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new ssh key, using the provided email as a label. ","date":"2021-08-16","objectID":"/hugo-setup/:4:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Adding your SSH key to the ssh-agent Start the ssh-agent in the background. eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. ssh-add ~/.ssh/id_ed25519 ","date":"2021-08-16","objectID":"/hugo-setup/:4:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Adding a new SSH key to your GitHub account 网页操作,很容易 ","date":"2021-08-16","objectID":"/hugo-setup/:4:3","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"创建 Github 仓库 个人建议创建两个仓库： 一个用于托管博客项目源文件，包括配置文件等包含后续可能配置 API KEY 的东西.设置权限为 Private（不公开） 一个用于托管博客编译后生成的静态 Html 文件(即使用 hugo 命令编译生成的 public 文件夹)，并配置该仓库使用 Github Pages，然后 Github 就会自动检测到它其中的静态 Html 文件并搭建网站.设置权限为 Public（公开） Github Workflow\" Github Workflow ","date":"2021-08-16","objectID":"/hugo-setup/:5:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"第一个仓库 设置为private权限等级，没人看得见 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 设置名为Origin的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github Clone用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 直接用vscode链接本地仓库与远端Github仓库 (vscode yyds) 创建.gitignore 在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传 参考 gitignore.io ","date":"2021-08-16","objectID":"/hugo-setup/:5:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"第二个仓库 创建仓库，注意名称 第二个仓库名字比较重要，必须是 {{你的github用户名}}.github.io. 比如我的 Github 名字为 FakePhysicist, 那么我需要创建的仓库名称为 fakephysicist.github.io. 在仓库设置里设置启用Github Pages 设置 Branch 为 master, 静态文件位置为/(root), 原因是我们在下个步骤中会直接将生成的 public 文件夹中的内容 push 到 master 分支的 / 目录下. ","date":"2021-08-16","objectID":"/hugo-setup/:5:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"从第一个仓库 push 到第二个仓库 ","date":"2021-08-16","objectID":"/hugo-setup/:6:0","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"纯手工操作 在 My_Website 目录下执行 git submodule update --init --recursive 将子模块更新到最新状态； In your config/_default/config.yaml file, set baseurl = “https://.github.io/”, where is your Github username. Stop Hugo if it’s running and delete the public directory if it exists (by typing rm -r public/). Add your .github.io repository into a submodule in a folder named public, replacing with your Github username: git submodule add -f -b master https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public Add everything to your local git repository and push it up to your remote repository on GitHub: git add . git commit -m \"Initial commit\" git push -u origin master regenerate your website’s HTML code by running Hugo and uploading the public submodule to GitHub: hugo cd public git add . git commit -m \"Build website\" git push origin main cd .. Notice that the default branch of github is main instead of master now. ","date":"2021-08-16","objectID":"/hugo-setup/:6:1","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"给源代码仓库添加 Github Action 创建 CI 脚本 什么是Github Action? Github Action 是 Github 提供的 CI 系统，可以让用户编写脚本，并在触发指定的操作后（比如新 commit push 到仓库），自动触发脚本.它可以： 编译项目 测试项目 登陆远程服务器 发布服务 等等…… 在源代码项目根目录下新建.github/workflow/main.yml.(通过 Github Action 网页端操作也可以) . ├── .git ├── .github │ └── workflows │ └── main.yml \u003c---在这里创建 ├── .gitignore ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Hugo setup# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@mainenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:target-branch:\"main\"source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的 Github no-reply 邮箱 注意 注意trigger on里的 branch 是否和自己的相同. 添加了 target-branch, 因为现在 Github 默认 branch 为 main. 最后三行内容需要自行替换. 脚本主要做了以下事情： 创建一个 Hugo 环境 使用 hugo 命令编译代码，产生 public 文件夹 将 public 文件 push 到你的Github用户名.github.io仓库.（也就是你之前创建的第二个仓库） 设置 Push 用的密钥 为了让 Github Action 脚本有权限将代码 Push 到我们的 xx.github.io 仓库，我们需要申请一个密钥并告诉它.在 Github 设置中找到 Developer settings/Personal access tokens 新建一个密钥，权限设置把 Repo 打勾. 复制密钥. 回到第一个仓库的设置里，选择Secrets（密钥） 新建密钥，将刚才生成的密钥填进去，名字设为 API_TOKEN_GITHUB (跟 CI 脚本里的名称对应即可) 观察效果 在 Push 新修改到第一个仓库后，在Action界面可以看到新的workflow开始运行了. 在workflow结束后，可以在第二个仓库看到新的Push 在等待 1-2 分钟后，即可在xx.github.io观察到变化. ","date":"2021-08-16","objectID":"/hugo-setup/:6:2","series":null,"tags":["Hugo","Git","Github","Github Action"],"title":"Hugo+DoIt 创建个人主页","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Hello World! This is my first note! ","date":"2021-08-16","objectID":"/hello-world/:0:0","series":null,"tags":["hello world"],"title":"Hello World","uri":"/hello-world/"},{"categories":null,"content":"穷且益坚，不坠青云之志\" 穷且益坚，不坠青云之志 时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ ","date":"2021-08-16","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/"}]