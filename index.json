[{"categories":["documentation"],"content":"再wsl环境下安装Go, Hugo 并且配置主题Loveit. ","date":"2021-08-16","objectID":"/hugo-setup/:0:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Go ","date":"2021-08-16","objectID":"/hugo-setup/:1:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"下载 wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz ","date":"2021-08-16","objectID":"/hugo-setup/:1:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"安装 Extract the archive you downloaded into /usr/local, creating a Go tree in /usr/local/go. sudo rm -rf /usr/local/go \u0026\u0026sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz Add /usr/local/go/bin to the PATH environment variable, or add to ~/.zshrc export PATH=$PATH:/usr/local/go/bin Verify that you’ve installed Go by opening a command prompt and typing the following command go version ","date":"2021-08-16","objectID":"/hugo-setup/:1:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Hugo ","date":"2021-08-16","objectID":"/hugo-setup/:2:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"安装/升级 go to github page and download the Hugo Extended installer for Debian (hugo_extended__Linux-64bit.deb) wget https://github.com/gohugoio/hugo/releases/download/v0.87.0/hugo_extended_0.87.0_Linux-64bit.deb install Hugo with sudo dpkg -i hugo_extended_0.87.0_Linux-64bit.deb update Hugo by repeating the first two steps, overwrite installation. ","date":"2021-08-16","objectID":"/hugo-setup/:2:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"常用命令 hugo： 编译项目生成静态网站，默认位置在项目的 public 目录下 hugo server： 启动你的网站服务 hugo new {folder}/{name}.md: 创建新文章，使用 markdown 进行排版，一般默认放在 posts 文件夹下； 基本没了，一般情况下用这三个命令就够了。 ","date":"2021-08-16","objectID":"/hugo-setup/:2:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Github SSH ","date":"2021-08-16","objectID":"/hugo-setup/:3:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Generating a new SSH key Open Terminal. Paste the text below, substituting in your GitHub email address. ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new ssh key, using the provided email as a label. ","date":"2021-08-16","objectID":"/hugo-setup/:3:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Adding your SSH key to the ssh-agent Start the ssh-agent in the background. eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. ssh-add ~/.ssh/id_ed25519 ","date":"2021-08-16","objectID":"/hugo-setup/:3:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Adding a new SSH key to your GitHub account 网页操作,很容易 ","date":"2021-08-16","objectID":"/hugo-setup/:3:3","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Git ","date":"2021-08-16","objectID":"/hugo-setup/:4:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Loveit ","date":"2021-08-16","objectID":"/hugo-setup/:5:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"安装 通过 git 安装的话，首先建议你在 GitHub 上 fork 成你自己的项目 standard method git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 将代码克隆到本地文件夹 My_Website SSH method 更安全，也免于 push 时输入密码 git clone git@github.com:FakePhysicist/starter-hugo-academic.git My_Website 进入文件夹，初始化项目：git submodule update --init --recursive，完成安装; ","date":"2021-08-16","objectID":"/hugo-setup/:5:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"auto update 说是自动，还是需要手动执行一条命令：git submodule update --remote --merge; ","date":"2021-08-16","objectID":"/hugo-setup/:5:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Deploy to Github Pages ","date":"2021-08-16","objectID":"/hugo-setup/:6:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"原理 网上介绍的办法很多，但核心其实就一句： 将 hugo 命令生成的 public 文件夹上传到 GitHub pages 项目下. public 文件夹相当于编译完成的静态网站，你在本地打开其实就能看。换句话说，你每次手动将这个目录下的内容上传到你的 GitHub page 项目也是可以的。 然后为了达到这个目的，Academic 给出的做法是利用 git submodule 将你的 GitHub page 项目作为 My_Website 项目的子模块存放到 public 目录。那么当你更新你的文章之后，只提交 public 文件夹内的变更到 GitHub page 项目即可。 ","date":"2021-08-16","objectID":"/hugo-setup/:6:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"教程 之前我们fork了模板,已经有了一个项目. 现在需要再新建一个github pages 项目. .github.io where is your Github username - we will save the generated website to this repo. To create the .github.io repository, click the “+” icon in the top right corner and then choose “New Repository”. 在 My_Website 目录下执行 git submodule update --init --recursive 将子模块更新到最新状态； In your config/_default/config.yaml file, set baseurl = “https://.github.io/”, where is your Github username. Stop Hugo if it’s running and delete the public directory if it exists (by typing rm -r public/). Add your .github.io repository into a submodule in a folder named public, replacing with your Github username: git submodule add -f -b master https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public Add everything to your local git repository and push it up to your remote repository on GitHub: git add . git commit -m \"Initial commit\" git push -u origin master ","date":"2021-08-16","objectID":"/hugo-setup/:6:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"push to github.io ","date":"2021-08-16","objectID":"/hugo-setup/:7:0","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"笨办法 regenerate your website’s HTML code by running Hugo and uploading the public submodule to GitHub: ```bash hugo cd public git add . git commit -m \"Build website\" git push origin main cd .. ``` **Notice that the default branch of github is `main` instead of `master` now.** ","date":"2021-08-16","objectID":"/hugo-setup/:7:1","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Github action 创建 CI 脚本 什么是Github Action? Github Action 是 Github 提供的 CI 系统，可以让用户编写脚本，并在触发指定的操作后（比如新 commit push 到仓库），自动触发脚本。它可以： 编译项目 测试项目 登陆远程服务器 发布服务 等等…… 在源代码项目根目录下新建.github/workflow/main.yml。(通过 Github Action 网页端操作也可以) . ├── .git ├── .github │ └── workflows │ └── main.yml \u003c---在这里创建 ├── .gitignore ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Hugo setup# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@mainenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:target-branch:\"main\"source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的 Github no-reply 邮箱 需要自定义的部分 注意trigger on里的 branch 是否和自己的相同，因为现在 Github 默认分支为 main。 同时最后三行内容需要自行替换。 脚本主要做了以下事情： 创建一个 Hugo 环境 使用 hugo 命令编译代码，产生 public 文件夹 将 public 文件 push 到你的Github用户名.github.io仓库。（也就是你之前创建的第二个仓库） 设置 Push 用的密钥 为了让 Github Action 脚本有权限将代码 Push 到我们的xx.github.io仓库，我们需要申请一个密钥并告诉它。在 Github 设置中找到Developer settings/Personal access tokens 新建一个密钥，权限设置把Repo打勾。 回到第一个仓库的设置里，选择Secrets（密钥） 新建密钥，将刚才生成的个人密钥填进去，名字设为API_TOKEN_GITHUB(跟 CI 脚本里的名称对应即可) 观察效果 在 Push 新修改到第一个仓库后，在Action界面可以看到新的workflow开始运行了。 在workflow结束后，可以在第二个仓库看到新的Push 在等待 1-2 分钟后，即可在xx.github.io观察到变化。 ","date":"2021-08-16","objectID":"/hugo-setup/:7:2","tags":["Hugo","Git"],"title":"Hugo Setup","uri":"/hugo-setup/"},{"categories":["documentation"],"content":"Hello World! This is my first note! ","date":"2021-08-16","objectID":"/hello-world/:0:0","tags":["hello world"],"title":"Hello World","uri":"/hello-world/"},{"categories":null,"content":"穷且益坚，不坠青云之志\" 穷且益坚，不坠青云之志 时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 FakePhysicist","uri":"/about/"}]